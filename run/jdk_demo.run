source ${genode_dir}/repos/ports/run/api_key.inc

proc check_config {bin xml_file xsd_file label avail_xsd_files xsd_inc nesting_level} { }

set tap "tap0"
set mkfs [installed_command mkfs.fat]
set dd   [installed_command dd]


#catch { exec $dd if=/dev/zero of=bin/fat.raw bs=1M count=16 }
#catch { exec $mkfs -F16 bin/fat.raw }

set build_components {
	core init
	drivers/timer
	drivers/nic
	lib/vfs/lxip
	lib/vfs/rump
	app/jdk/java
	server/ram_blk
	server/part_blk
	server/rump_fs
	server/fs_rom
	server/vfs
}

lappend_if [have_spec gpio] build_components drivers/gpio

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components
create_boot_directory

append config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="LOG"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="PD"/>
		<service name="IRQ"/>
		<service name="IO_PORT"/>
		<service name="IO_MEM"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<default caps="100" />
	<start name="timer">
		<resource name="RAM" quantum="2M" />
		<provides> <service name="Timer" /> </provides>
	</start>

	<start name="nic_drv" caps="300" ld="no">
		<binary name="linux_nic_drv"/>
		<resource name="RAM" quantum="32M" />
		<provides> <service name="Nic" /> </provides>
		<config ld_verbose="no">
			<nic tap="tap0"/>
		</config>
	</start>

	<start name="ram_blk">
		<resource name="RAM" quantum="320M"/>
		<provides> <service name="Block"/> </provides>
		<config file="f4a_sd_256.img" block_size="512"/>
	</start>

	<start name="part_blk">
		<resource name="RAM" quantum="5M"/>
		<provides><service name="Block"/></provides>
		<route>
			<service name="Block"><child name="ram_blk" /></service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
		<config> <default-policy partition="1" writeable="yes"/> </config>
	</start>
	
	<start name="vfs" caps="200">
		<resource name="RAM" quantum="48M"/>
		<provides> <service name="File_system"/> </provides>
		<route>
			<service name="Block"><child name="part_blk" /></service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
		<config>
			<vfs>
				<rump fs="ext2fs" ram="32M" writeable="yes"/>
			</vfs>
			<policy label="fs_rom -> " root="/" writeable="yes" />
		</config>
	</start>

	<start name="fs_rom">
		<resource name="RAM" quantum="128M" />
		<provides><service name="ROM"/></provides>
	</start>

	<start name="java" caps="750">
		<resource name="RAM" quantum="256M" />
		<route>
			<service name="ROM" label="zip.lib.so">
				<parent label="jzip.lib.so" />
			</service>
			<service name="ROM" label="net.lib.so">
				<parent label="jnet.lib.so" />
			</service>
			<service name="ROM" label="servlet.tar">
				<child name="fs_rom" />
			</service>
			<service name="ROM" label="classes.tar">
				<child name="fs_rom" />
			</service>
			<service name="ROM" label="ca.cert">
				<child name="fs_rom" />
			</service>
			<service name="ROM" label="default.policy">
				<child name="fs_rom" />
			</service>
			<service name="ROM" label="default_local.policy">
				<child name="fs_rom" />
			</service>
			<service name="ROM" label="application.properties">
				<child name="fs_rom" />
			</service>
			<service name="ROM" label="tzdb.dat">
				<child name="fs_rom" />
			</service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
		<config ld_verbose="no">
			<arg value="/bin/java" />
			<arg value="-XX:+NeverActAsServerClassMachine"/>
			<arg value="-XX:+UnlockDiagnosticVMOptions"/>
			<arg value="-XX:-ImplicitNullChecks"/>
			<arg value="-XX:+CITime" />
			<arg value="-Xdiag"/>:
<!--			<arg value="-Xlog:gc" /> -->
<!--			<arg value="-verbose:jni"/> -->
<!--			<arg value="-verbose:class"/> -->
			<arg value="-Dspring.config.location=/application.properties"/>
			<arg value="-jar" />
			<arg value="servlet.jar" />
			<libc stdin="/dev/null" stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc" socket="/dev/socket" />
			<vfs>
				<dir name="etc">
					<inline name="resolv.conf">nameserver 1.1.1.1</inline>
				</dir>
				<dir name="dev">
					<dir name="socket"> <lxip ip_addr="10.0.0.16" netmask="255.255.255.0" gateway="10.0.0.1"/> </dir>
					<log/><null/><inline name="rtc">2000-01-01 00:00</inline>
				</dir>
				<dir name="bin">
					<rom name="java" />
				</dir>
				<dir name="lib">
					<rom name="java.lib.so" />
					<inline name="jvm.cfg">-server KNOWN
-client IGNORE
</inline>
					<dir name="server">
						<rom name="jvm.lib.so" />
					</dir>
					<dir name="security">
						<rom name="default.policy" />
					</dir>
					<rom name="tzdb.dat"/>
				</dir>
				<dir name="modules">
					<tar name="classes.tar"/>
				</dir>
				<dir name="var">
					<dir name="tmp"> <ram/> </dir>
				</dir>
				<dir name="conf">
					<dir name="security">
						<dir name="policy">
							<dir name="unlimited">
								<rom name="default_local.policy"/>
							</dir>
						</dir>
					</dir>
				</dir>
				<rom name="zip.lib.so" />
				<rom name="nio.lib.so" />
				<rom name="net.lib.so" />
				<rom name="management.lib.so"/>
				<rom name="ca.cert"/>
				<rom name="application.properties"/>
				<tar name="servlet.tar"/>
				<ram/>
			</vfs>
		</config>
	</start>
}

append_platform_drv_config

append config {
</config>
}

install_config $config

set boot_modules {
	core init ld.lib.so timer

	ram_blk part_blk
	
	rump.lib.so rump_fs.lib.so
	vfs.lib.so vfs_rump.lib.so
	fs_rom

	java jli.lib.so servlet.tar httpserver.tar
	java.lib.so jvm.lib.so jzip.lib.so jimage.lib.so
	libc.lib.so libm.lib.so zlib.lib.so nio.lib.so jnet.lib.so

	management.lib.so

	stdcxx.lib.so vfs.lib.so vfs
	vfs_lxip.lib.so lxip.lib.so libc_pipe.lib.so

	f4a_sd_256.img
}

append boot_modules [nic_drv_binary]

append_platform_drv_boot_modules

build_boot_image $boot_modules

run_genode_until forever
